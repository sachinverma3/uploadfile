    onFileChanged(event, year) {

        const file = event.target.files[0];
        const uploadData = new FormData();
        uploadData.append('myFile', file, file.name);
        uploadData.append('year', year);
        console.log(uploadData);
        this._dashboardSer.uploadPaymentCsv(uploadData)
            .subscribe((_res: any) => {

                console.log(_res);
            });
    }
	
	
	
	 uploadPaymentCsv(file: any): Observable<any> {
    return this.http.post<any>(this.rootUrl + '/CompanyPayment/ValidatePaymentCSV', file);
  }
  
  ___________________________________
     [HttpPost]
        public IHttpActionResult ValidatePaymentCSV()
        {
            try
            {
                 


                string filename = "";
                var httpRequest = HttpContext.Current.Request;
                string year = httpRequest.Form[0];

                DateTime dt;
                DateTime.TryParseExact(year, "yyyy", CultureInfo.InvariantCulture,
                                      DateTimeStyles.None, out dt);

                var PaymentList = db.app_payment.Where(x => x.value_date.Value.Year == dt.Year).ToList();


                if (httpRequest.Files.Count > 0)
                { 
                    foreach (string file in httpRequest.Files)
                    {
                        var postedFile = httpRequest.Files[file];
                        if (postedFile != null && postedFile.ContentLength > 0)
                        {
                            var ext = postedFile.FileName.Substring(postedFile.FileName.LastIndexOf('.'));
                            filename = Guid.NewGuid() + ext.ToLower();
                            var filePath = HttpContext.Current.Server.MapPath("~/Content/Uploads/Users/" + filename);

                            postedFile.SaveAs(filePath);


                            List<object> li = new List<object>();

                            //Read the contents of CSV file.  
                            string csvData = File.ReadAllText(filePath);

                            //Execute a loop over the rows.  
                            foreach (string row in csvData.Split('\n'))
                            {
                                 
                            }


                        }
                    }



                    return Ok();
                }
                else { return Ok("Please upload image!"); }
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }
		
		
		
		CREATE TABLE `app_payment` (
  `enrollment_id` int(10) unsigned NOT NULL,
  `value_date` date DEFAULT NULL,
  `accounting_date` date NOT NULL,
  `value` decimal(16,2) NOT NULL,
  `sign` varchar(1) DEFAULT NULL,
  `description` text NOT NULL,
  `type` varchar(32) DEFAULT NULL,
  `SCT` varchar(35) DEFAULT NULL,
  `file` varchar(64) DEFAULT NULL,
  `disclaimer` tinyint(1) NOT NULL DEFAULT '0',
  `CRO` varchar(16) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`),
  KEY `app_payment_app_enrollmentlatest_id_fk` (`enrollment_id`),
  CONSTRAINT `app_payment_app_enrollmentlatest_id_fk` FOREIGN KEY (`enrollment_id`) REFERENCES `app_enrollment` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;

		
